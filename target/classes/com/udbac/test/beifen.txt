package com.udbac.controller;

import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.RegionUtil;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFDataFormat;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.udbac.entity.DataExport;
import com.udbac.model.UserBean;
import com.udbac.service.DataExportService;
import com.udbac.util.FilePathManager;
import com.udbac.util.JSONUtil;
import com.udbac.util.XlsxUtil;

/**
 * 报告导出 2016-05-20
 * 
 * @author han
 *
 */

@Controller
@RequestMapping("/export")
public class DataExportController {

	@Autowired
	DataExportService exportService;

	@Autowired
	private FilePathManager filePathManager;
	/**
	 * 
	 * @param date
	 * @param response
	 * @param request
	 * @param actName
	 * @param actCode
	 * @param customerName
	 * @param endDate
	 * @param customer_id
	 * @return
	 * @throws IOException
	 */
	@ResponseBody
	@RequestMapping(value="sumDay.do",method = RequestMethod.POST)
	public String sumName(@RequestParam(value = "date", required = true) String date,
			HttpServletResponse response, HttpServletRequest request,
			@RequestParam(value = "actName", required = false) String actName,
			@RequestParam(value = "actCode", required = false) String actCode,
			@RequestParam(value = "endDate", required = true) String endDate,
			@RequestParam(value = "customer_id", required = true) String customer_id) throws IOException{
		    Date dt = null;
		    Date dte = null;//将存放的是结束日期
		   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		if (date != null && date != "") {
			try {
				dt = sdf.parse(date);
			} catch (ParseException e) {

				e.printStackTrace();
			}
		} else {// 如果没有选择时间的话，系统默认选择当前事件的前一天
			Date date1 = new Date();
			date1=getNextDay(date1);
			String time = sdf.format(date1);
			try {
				dt = sdf.parse(time);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		if(endDate!=null &&endDate!=""){
			try {
				dte=sdf.parse(endDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			
		}
		    Integer sumName=exportService.sumDay(customer_id,dt, actName, actCode,dte);
		    String falg="";
		    if(sumName>0){
		    	falg="1";
			   }else{
				falg="2";
			   }
		    return falg;
	}
	
	@SuppressWarnings({ "rawtypes", "unused","unchecked" })
	@ResponseBody
	@RequestMapping("/exportDay.do")
	public ModelAndView ListInfo(@RequestParam(value = "date", required = true) String date,
			HttpServletResponse response, HttpServletRequest request,
			@RequestParam(value = "actName", required = false) String actName,
			@RequestParam(value = "actCode", required = false) String actCode,
			@RequestParam(value = "customerName", required = true) String customerName,
			@RequestParam(value = "endDate", required = true) String endDate,
			@RequestParam(value = "customer_id", required = true) String customer_id) throws Exception {
		// 取得session中的user对象
		HttpSession session = request.getSession();
		UserBean user = (UserBean) session.getAttribute("user");
		//获得图片的路径
		String imgPath = session.getServletContext().getRealPath("/") + "images/logo.png";
		// 判断用户角色,3:为接口人，6:为客户
//		if ("3".equals(user.getROLE_ID())) {
//			// 角色是接口人时，可以导出全部周报数据
//		} else if ("6".equals(user.getROLE_ID())) {
//			// 角色是客户，只能导正常的数据，作弊数据不允许
//		}
		
		Date dt = null;
		Date dte=null;//存放的是结束时间
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String customerNames = new String(customerName.getBytes("iso-8859-1"), "utf-8");// 解决乱码问题
		String custName = customerNames + "互联网广告监测日报";
		String emonth = "";// 结束时间
		String entry = "";// excel名称
		String smonth = "";// 开始时间
		String month="";//同时填写开始时间和结束时间，需要将月份的值存放在单元格里
		if (date != null && date != "") {
			smonth = date.substring(0, 4) + "-" + date.substring(5, 7) + "-" + date.substring(8, 10);
			try {
				dt = sdf.parse(date);
				Date date1 = new Date();
				date1=getNextDay(date1);
				month=sdf.format(dt)+"_"+sdf.format(date1);
			} catch (ParseException e) {

				e.printStackTrace();
			}
		} else {// 如果没有选择时间的话，系统默认选择当前事件的前一天
			Date date1 = new Date();
			date1=getNextDay(date1);
			String time = sdf.format(date1);
			month=time;
			//smonth = time.substring(0, 4) + "-" + time.substring(5, 7) + "-" + time.substring(8, 10);
			try {
				dt = sdf.parse(time);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
			if(endDate!=null &&endDate!=""){
			try {
				dte=sdf.parse(endDate);
				 Date dts=sdf.parse(date);
				month=sdf.format(dts)+"_"+sdf.format(dte);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			//emonth = endDate.substring(0, 4) + "-" + endDate.substring(5, 7) + "-" + endDate.substring(8, 10);
			smonth=month;//将结束日期和开始日期赋值给smonth;
			//entry = "项目日报_" + customerNames + "移动互联网推广监测_" + smonth + "_" + emonth;
			entry = "项目日报_" + customerNames + "移动互联网推广监测_" + month;
		} else {
			entry = "项目日报_" + customerNames + "移动互联网推广监测_" + month;
		}
		Map map = new HashMap();
		String path = filePathManager.getTmpExcel() + entry + ".xlsx";// 临时的文件目录
		List list1 = new ArrayList();
		List listHuiZong = new ArrayList();
		List listHeBing = new ArrayList();
		
		String[] title = { "项目名称", "媒体名称", "广告位", "广告曝光监测",  "", "", "", "", "","","", "","活动网站监测", "", "", "", "", "",
				"完成率情况", "" ,"URL","备注"};
		String[] titles = { "", "", "", "营销识别码", "日期","曝光预估", "曝光次数", "曝光人数", "点击预估","点击次数", "点击人数", "点击率CTR", "访问次数", "访问人数", "浏览量",
				"跳出次数", "跳出率", "平均访问时长(s)", "曝光完成率", "点击完成率" ,"",""};
		list1.add(title);
		list1.add(titles);
		ArrayList<DataExport> info = (ArrayList<DataExport>) exportService.listInfo(dt, actName, actCode,customer_id,dte);

		 String   hzmc="";//汇总名称
		    double bgyg=0;//曝光预估
		    double  bgcs=0;//曝光次数
		    int  bgrs=0;//曝光人数
		    double djyg=0;//点击预估
		    double djcs=0;//点击次数
		    int  djrs=0;////点击人数
		    double  fscs=0;//访问次数
		    int  fwrs=0;//访问人数
		    int lll=0;//浏览率
		    double 	 tccs=0;//跳出次数
		    double  pjfwsc=0;//平均访问时间
		    String  url="";//url
		    int fzcd=1;//分组长度
		    double tfl=0;//投放量
		    boolean unit=false;//投放单位的标记位
		    int flge=0;//标记汇总与明细的差别
		    String tfrq="";//投放日期
		     if(info.size()==1){//查询数据==1条
			    	DataExport de=info.get(0);
			    	//投放单位为cpm的时候，曝光预估=日历表里的投放量*1000；其他情况直接取排期点位表里的日均报告预估。当分母为0时，比率表示为"-"
			    	if(de.getUnit().equals("CPM")){
			    		//明细CPM
			    		 unit=true;
						 listHeBing.add(new DataExportController().checkOut(de,unit,1));
						 //汇总CPM
				    	 listHeBing.add(new DataExportController().checkOut(de,unit,2));
			    	}else{
			    		 unit=false;
			    		 //明细
						  listHeBing.add(new DataExportController().checkOut(de,unit,1));
						  //汇总
						  listHeBing.add(new DataExportController().checkOut(de,unit,2));
						 
			    	     }
			    	
			    }else{//查询数据大于1条时
			    	for (int i = 0; i < info.size(); i++) {
					DataExport de = info.get(i);
					//投放单位为cpm的时候，曝光预估=日历表里的投放量*1000；其他情况直接取排期点位表里的日均报告预估。当分母为0时，比率表示为"-"
				    if(de.getUnit().equals("CPM")){
				    	unit=true;//标记位投放单位
						 listHeBing.add(new DataExportController().checkOut(de,unit,1));
						 
				    }else{
				    	unit=false;
						 listHeBing.add(new DataExportController().checkOut(de,unit,1));
				    }
				  
				    if(i<info.size()-1){//1至n-1个元素
				    	 hzmc=info.get(i).getMedia_name();
			    		 bgyg+=info.get(i).getExposure_avg();
			    		 bgcs+=info.get(i).getPv();
			    		 bgrs+=info.get(i).getUv();
	 		    		 djyg+=info.get(i).getClick_avg();
			    		 djcs+=info.get(i).get_pv();
			    		 djrs+=info.get(i).get_uv();
			    		 fscs+=info.get(i).getA_vv();
			    		 fwrs+=info.get(i).getA_uv();
			    		 lll+=info.get(i).getA_pv();
			    		 tccs+=info.get(i).getBounce_t();
			    		 pjfwsc+=info.get(i).getTime_s();
			    		 url=info.get(i).getUrl_pc();
				    	 tfl+=info.get(i).getPut_value();
				    	 tfrq=sdf.format(info.get(i).getPut_date());
				    	if(info.get(i).getMedia_name().equals(info.get(i+1).getMedia_name())){//上一个对象和当前对象 媒体名称相同
				    		 fzcd++;
				    	}else{
				    		DataExport des=new DataExport();
				    		des.setMedia_name(hzmc);
				    		des.setExposure_avg(bgyg);
				    		des.setPv(bgcs);
				    		des.setUv(bgrs);
				    		des.setClick_avg(djyg);
				    		des.set_pv(djcs);
				    		des.set_uv(djrs);
				    		des.setA_vv(fscs);
				    		des.setA_uv(fwrs);
				    		des.setA_pv(lll);
				    		des.setBounce_t(tccs);
				    		des.setTime_s(pjfwsc/fzcd);
				    		des.setUrl_pc(url);
				    		des.setPut_value(tfl);
					    	des.setPut_date(sdf.parse(tfrq));
					    	if(unit&&fzcd==1){
					    		//CPM汇总
						    	listHeBing.add(new DataExportController().checkOut(des, unit,2));	
					    	}else if(unit==false&fzcd==1){
					    		//汇总
					    		listHeBing.add(new DataExportController().checkOut(des,unit,2));
					    	}else{
					    		//媒体名称相等
					    		listHeBing.add(new DataExportController().checkOut(des,unit,3));
					    	}
				    		/**/
					    	 fzcd=1;
				    		 hzmc="";
				    		 bgyg=0;
				    		 bgcs=0;
				    		 bgrs=0;
				    		 djyg=0;
				    		 djcs=0;
				    		 djrs=0;
				    		 fscs=0;
				    		 fwrs=0;
				    		 lll=0;
				    		 tccs=0; 
				    		 pjfwsc=0;
				    		 url="";
				    		 unit=false;
				    		 tfl=0;
				    		 tfrq="";
				    	}
				    }else{//最后一个元素
				    	 hzmc=info.get(i).getMedia_name();
			    		 bgyg+=info.get(i).getExposure_avg();
			    		 bgcs+=info.get(i).getPv();
			    		 bgrs+=info.get(i).getUv();
			    		 djyg+=info.get(i).getClick_avg();
			    		 djcs+=info.get(i).get_pv();
			    		 djrs+=info.get(i).get_uv();
			    		 fscs+=info.get(i).getA_vv();
			    		 fwrs+=info.get(i).getA_uv();
			    		 lll+=info.get(i).getA_pv();
			    		 tccs+=info.get(i).getBounce_t();
			    		 pjfwsc+=info.get(i).getTime_s();
			    		 url=info.get(i).getUrl_pc();
			    		 tfl+=info.get(i).getPut_value();
			    		 tfrq=sdf.format(info.get(i).getPut_date());
//				    	if(info.get(i).getMedia_name().equals(info.get(i-1).getMedia_name())){//第一个和第二个元素对比
//				    		
//				    	}else{
			    		 DataExport des=new DataExport();
				    		des.setMedia_name(hzmc);
				    		des.setExposure_avg(bgyg);
				    		des.setPv(bgcs);
				    		des.setUv(bgrs);
				    		des.setClick_avg(djyg);
				    		des.set_pv(djcs);
				    		des.set_uv(djrs);
				    		des.setA_vv(fscs);
				    		des.setA_uv(fwrs);
				    		des.setA_pv(lll);
				    		des.setBounce_t(tccs);
				    		//des.setBounce_r(tcl);
				    		des.setTime_s(pjfwsc/fzcd);
				    		des.setUrl_pc(url);
				    		des.setPut_value(tfl);
				    		des.setPut_date(sdf.parse(tfrq));
				    		if(unit&&fzcd==1){
					    		listHeBing.add(new DataExportController().checkOut(des,unit,2));
					    	}else if(fzcd==1&&unit==false){
					    		listHeBing.add(new DataExportController().checkOut(des,unit,2));
					    	}else{
						    	listHeBing.add(new DataExportController().checkOut(des,unit,3));
					    	}
				    		
				    	/**/fzcd=1;	
					    	hzmc="";
				    		 bgyg=0;
				    		 bgcs=0;
				    		 bgrs=0;
				    		 djyg=0;
				    		 djcs=0;
				    		 djrs=0;
				    		 fscs=0;
				    		 fwrs=0;
				    		 lll=0;
				    		 tccs=0;
				    		 pjfwsc=0;
				    		 url="";
				    		 tfl=0;
				    		 tfrq="";
//				    	}
				    	
				    }
			    }
			} 
			map.put("custName", custName);
			map.put("imgPath", imgPath);
			map.put("dt", month);
			map.put("list", listHeBing);
			map.put("list1", list1);
			map.put("path", path);
			map.put("sheetName", entry);
			WriteExcel(map);
		  
		return this.LoadExcel(request, response, path);
	}

	public void getMergedRegion() {

	}
	/****
	 * 获取Session中用户的省级编号
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(value = "/getProvince.do", method = RequestMethod.POST)
	public @ResponseBody void getProvince(HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		UserBean user;
		try {
			user = (UserBean) request.getSession().getAttribute("user");
			// 取得user的Province_id
			response.getWriter().print(user.getPROVINCE_ID());
			//System.out.print("========"+user.getPROVINCE_ID());
		} catch (Exception e) {
			response.getWriter().print("error");
		}

	}
	//拼接数组	
	public String[] checkOut(DataExport de,boolean unit,int flag){
		String bgwcl="";//曝光完成率
		String djwcl ="";//点击完成率
		String djyg ="";//点击预估
		String tcl="";//跳出率 
		String fwcs="";//访问次数
		String bgcs="";//曝光次数
		String djl="";//点击率CTR
		String bgyg="";//曝光预估
		String bgrs="";//曝光人数
		String djcs="";//点击次数
		String djrs="";//点击人数
		String fwrs="";//访问人数
		String lll="";//浏览量
		String tcsc="";//跳出次数
		String pjfwsj="";//平均访问时间
		String tfrq="";//投放日期
		DecimalFormat df0 = new DecimalFormat("#,##0");// 不显示小数点,千分位
		DecimalFormat df1 = new DecimalFormat("#,##0.00");// 显示两位小数点，千分位
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if(de.getPut_value()==null||de.getPut_value()==0){
		  bgwcl="#Div/0!";
		}else{
			if(unit){
				bgwcl=df1.format(de.getPv()/(de.getPut_value()*1000)*100)+ "%";
			}else {
				if(de.getExposure_avg()==null||de.getExposure_avg()==0){
					 bgwcl="#Div/0!";
				}else{
					bgwcl=df1.format(de.getPv() /de.getExposure_avg() * 100)+"%";
				}
					
				}
			
		} 
		if(de.getClick_avg()==null||de.getClick_avg()==0){
			djwcl="#Div/0!";//除数为0的情况下
			djyg ="0";
		}else{
			djwcl=df1.format(de.get_pv()/de.getClick_avg() * 100)+ "%";
			djyg=df0.format(de.getClick_avg());
		}
		if(de.getA_vv()==null||de.getA_vv()==0){
			fwcs="0";
			tcl="#Div/0!";
		}else{
			tcl=df1.format(de.getBounce_t()/de.getA_vv()*100)+ "%";
			fwcs=df0.format(de.getA_uv());
		}
		if(de.getPv()==null||de.getPv()==0){
			bgcs="0";
			djl="#Div/0!";
			bgwcl="#VALUE!";
		}else{
			djl=df1.format(de.get_pv()/de.getPv()*100)+ "%";
			bgcs=df0.format(de.getPv());
		}
		if(de.getExposure_avg()==null||de.getExposure_avg()==0){
			bgyg="0";
		}else{
			bgyg=df0.format(de.getExposure_avg());
		}
		if(de.getUv()==null||de.getUv()==0){
			bgrs="0";
		}else{
			bgrs=df0.format(de.getUv());
		}
		if(de.get_pv()==null||de.get_pv()==0){
			djcs="0";
		}else{
			djcs=df0.format(de.get_pv());
		}
		if(de.get_uv()==null||de.get_uv()==0){
			djrs="0";
		}else{
			djrs=df0.format(de.get_uv());
		}
		if(de.getA_uv()==null||de.getA_uv()==0){
			fwrs="0";
		}else{
			fwrs=df0.format(de.getA_uv());
		}
		if(de.getA_pv()==null||de.getA_pv()==0){
			lll="0";
		}else{
			lll=df0.format(de.getA_pv());
		}
		if(de.getBounce_t()==null||de.getBounce_t()==0){
			tcsc="0";
		}else{
			tcsc=df0.format(de.getBounce_t());
		}
		if(de.getTime_s()==null||de.getTime_s()==0){
			pjfwsj="0";
		}else{
			pjfwsj=df0.format(de.getTime_s());
		}
		if(flag==1){//明细
			 String[] checkout2 = {  de.getActivity_name(), de.getMedia_name(), de.getPoint_location(), de.getMic(),sdf.format(de.getPut_date()), // 获得当前的日期
						bgyg,bgcs,bgrs, djyg, djcs,djrs,djl, fwcs,fwrs,lll,
						tcsc,tcl,pjfwsj,bgwcl,djwcl ,de.getUrl_pc(),""};
			          return  checkout2;
		}else if(flag==2){//汇总
			 String[] checkout2 = {  de.getMedia_name()+"汇总", "","","","", // 获得当前的日期
						bgyg,bgcs,bgrs, djyg, djcs,djrs,djl, fwcs,fwrs,lll,
						tcsc,tcl,pjfwsj,bgwcl,djwcl ,"-",""};
						return checkout2;
			
		}else{//汇总并且媒体名称相等
			 String[] checkout2 = {  de.getMedia_name()+"汇总", "","","","", // 获得当前的日期
						bgyg,bgcs,bgrs, djyg, djcs,djrs,djl, fwcs,fwrs,lll,
						tcsc,tcl,pjfwsj,"-","-",de.getUrl_pc(),""};
						return checkout2;
		}
		
	}
	
	public static void setCellStyle(XSSFCellStyle cellStyle, Workbook workbook) {
		cellStyle.setBorderBottom(XSSFCellStyle.BORDER_THIN); // 下边框
		cellStyle.setBorderLeft(XSSFCellStyle.BORDER_THIN);// 左边框
		cellStyle.setBorderTop(XSSFCellStyle.BORDER_THIN);// 上边框
		cellStyle.setBorderRight(XSSFCellStyle.BORDER_THIN);// 右边框
		cellStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER); // 居中

		Font font = workbook.createFont();
		font.setFontName("calibri");
		font.setFontHeightInPoints((short) 9);// 设置字体大小

		cellStyle.setFont(font);// 选择需要用到的字体格式

	}

	/****
	 * 获取Session中用户角色 han 2016-06-07
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(value = "/getUserSession.do", method = RequestMethod.POST)
	public @ResponseBody void getUserSeesion(HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		UserBean user;
		try {
			user = (UserBean) request.getSession().getAttribute("user");
			// 取得user的userID
			response.getWriter().print(user.getROLE_ID());
		} catch (Exception e) {
			response.getWriter().print("error");
		}

	}
	/**
	 * 省级客户投放单位
	 * 
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	@ResponseBody
	@RequestMapping(value = "/queryCustomer.do")
	public List queryCustomer(@RequestParam(value = "province", required = true) String province) {
		List queryCus = exportService.queryCustomer(province);
		return queryCus;
	}

	/**
	 * 实例化一个excel
	 * 
	 * @param map
	 */
	@SuppressWarnings({ "rawtypes", "deprecation", "unchecked", "unused", "resource" })
	public void WriteExcel(Map map) {
		String outputFile = (String) map.get("path");
		File file = new File(outputFile);
		XSSFWorkbook workbook; // 实例化一个工作簿
		try {
			FileOutputStream out = new FileOutputStream(outputFile);
			workbook = new XSSFWorkbook();
			XSSFCellStyle style1 = workbook.createCellStyle();
			XSSFFont font1 = workbook.createFont();
			font1.setFontName("calibri");
			font1.setFontHeightInPoints((short) 9);// 设置字体大小
			style1.setFont(font1);// 选择需要用到的字体格式
			new DataExportController().setBoderStyle(style1);
			CreationHelper helper = workbook.getCreationHelper();
			style1.setDataFormat(helper.createDataFormat().getFormat("yyyy-MM-dd"));// 设置日期的格式信息
			// 建立一张表格
			XSSFSheet sheet = workbook.createSheet((String) map.get("custName"));
			// 设置特殊列宽
			sheet.setColumnWidth(1, 15 * 256);// 设置第一列的列宽，估计值
			sheet.setColumnWidth(2, 9 * 256);// 设置第二列的列宽
			sheet.setColumnWidth(3, 12 * 256);
			sheet.setColumnWidth(4, 22 * 256);
			sheet.setColumnWidth(18, 14 * 256);
			// 插入logo图片
			new DataExportController().insetImages((String)map.get("imgPath"), workbook, sheet);
			// 设置整个表头的格式
			sheet.setDisplayGridlines(false);// 设置无边框
			XSSFCellStyle style = workbook.createCellStyle();
			new DataExportController().setBoderStyle(style);
			style.setFillForegroundColor(new XSSFColor(new Color(55, 96, 145))); //表头的颜色
			style.setFillPattern(CellStyle.SOLID_FOREGROUND);
			XSSFFont font2 = workbook.createFont();
			font2.setFontName("宋体");
			font2.setFontHeightInPoints((short) 9);// 设置字体大小
			font2.setColor(HSSFColor.WHITE.index);// 字体颜色
			font2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
			style.setFont(font2);
			//设置汇总的格式
			XSSFCellStyle styleHuiZong = workbook.createCellStyle();
			XSSFFont fontHui = workbook.createFont();
			fontHui.setFontName("calibri");
			fontHui.setFontHeightInPoints((short) 9);// 设置字体大小
			//fontHui.setColor(HSSFColor.WHITE.index);// 字体颜色
			fontHui.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
			styleHuiZong.setFont(fontHui);// 选择需要用到的字体格式
			new DataExportController().setBoderStyle(styleHuiZong);
			styleHuiZong.setFillForegroundColor(new XSSFColor(new Color(219, 229, 241)));//汇总 的背景色
            styleHuiZong.setFillPattern(CellStyle.SOLID_FOREGROUND);
            //设置中文字的格式为9号
            XSSFCellStyle styleZ = workbook.createCellStyle();
            XSSFFont fontZhong = workbook.createFont();
            fontZhong.setFontName("宋体");
            fontZhong.setFontHeightInPoints((short) 9);// 设置字体大小
            styleZ.setFont(fontZhong);
            new DataExportController().setBoderStyle(styleZ);
			
			// 单独的把表头提出来
			List<String[]> l1 = new ArrayList<String[]>();
			l1 = (List<String[]>) map.get("list1");// 获得list对象，并且添加到excel中
			int rowIndex = 7;// 起始行
			for (int i = 0; i < l1.size(); i++) {
				XSSFRow row = sheet.createRow(rowIndex++);
				row.setHeight((short) 495);// 目的是想把行高设置成24.75*20,poi转化为像素需要*20
				String[] str = l1.get(i);
				for (int j = 0; j < str.length; j++) {
					XSSFCell cell = row.createCell(j + 1);
					cell.setCellValue(str[j]);
					cell.setCellStyle(style);
				}
			}
			
			List<String[]> l = new ArrayList<String[]>();
			l = (List<String[]>) map.get("list");// 获得list对象，并且添加到excel中
			rowIndex = 9;// 起始行
			for (int i = 0; i < l.size(); i++) {
				XSSFRow row = sheet.createRow(rowIndex++);
				String[] str = l.get(i);//获得当前遍历的对象
				
				for (int j = 0; j < str.length; j++) {
					row.setHeight((short) 450);// 目的是想把行高设置成22.5*20,poi转化为像素需要*20
				    XSSFCell cell = row.createCell(j + 1);
					cell.setCellValue(str[j]);
					if(str[3]==null||str[3].equals("")){
						cell.setCellStyle(styleHuiZong);
					}else{
						cell.setCellStyle(style1);
					}
				}
				//判断汇总行，添加合并的单元格
				if(str[3]==null||str[3].equals("")){
					//合并单元格到日期
					sheet.addMergedRegion(new CellRangeAddress(9+i, 9+i, 1, 5));
				}else if(str[1]!=null){//设置前3列为宋体
					Cell cell1 = row.getCell(1); 
					Cell cell2 = row.getCell(2); 
					Cell cell3 = row.getCell(3); 
					 cell1.setCellStyle(styleZ);
					 cell2.setCellStyle(styleZ);
					 cell3.setCellStyle(styleZ);
				}
			    
			}
			//英文字体
			XSSFFont font = workbook.createFont();
			font.setFontHeightInPoints((short) 9); // 9号字体
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
			CellStyle cellStyle = workbook.createCellStyle();
			cellStyle.setFont(font);
			//汉字9号字体
			CellStyle ceStyle = workbook.createCellStyle();
			XSSFFont fontStyle = workbook.createFont();
			fontStyle.setFontName("宋体");
			fontStyle.setFontHeightInPoints((short) 9);// 设置字体大小
			ceStyle.setFont(fontStyle);

			XSSFRow row1 = sheet.createRow(2);// 需要新建表格，来获取当前的信息
			XSSFRow row2 = sheet.createRow(3);
			XSSFRow row3 = sheet.createRow(4);

			XSSFCell cell1 = row1.createCell(1);
			XSSFCell cell2 = row2.createCell(1);
			XSSFCell cell3 = row3.createCell(1);
			XSSFCell cell4 = row3.createCell(2);
			XSSFCell cell5 = row2.createCell(2);
			XSSFCell cell6 = row1.createCell(2);
		
			cell1.setCellValue("Campaign:");
			cell1.setCellStyle(cellStyle);
			cell2.setCellValue("Period:");
			cell2.setCellStyle(cellStyle);
			cell3.setCellValue("Preparedby:");
			cell3.setCellStyle(cellStyle);
			cell4.setCellValue("UDBAC");
			cell4.setCellStyle(cellStyle);
			cell5.setCellValue( (String)map.get("dt"));// 获得填写的日期信息
			cell5.setCellStyle(style1);
			cell6.setCellValue((String) map.get("custName"));
			cell6.setCellStyle(ceStyle);
			//设置表头的合并单元格信息
			sheet.addMergedRegion(new CellRangeAddress(7, 7, 4, 12));
			sheet.addMergedRegion(new CellRangeAddress(7, 7, 13, 18));
			sheet.addMergedRegion(new CellRangeAddress(7, 7, 19, 20));
			sheet.addMergedRegion(new CellRangeAddress(7, 8, 1, 1));
			sheet.addMergedRegion(new CellRangeAddress(7, 8, 2, 2));
			sheet.addMergedRegion(new CellRangeAddress(7, 8, 3, 3));
			sheet.addMergedRegion(new CellRangeAddress(7, 8, 21, 21));
			sheet.addMergedRegion(new CellRangeAddress(7, 8, 22, 22));

			FileOutputStream fout = new FileOutputStream(outputFile);
			workbook.write(fout);
			fout.flush();
			fout.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param request
	 * @param response
	 * @param obj
	 * @return
	 * @throws IOException 
	 */
	@SuppressWarnings("unused")
	public ModelAndView LoadExcel(HttpServletRequest request, HttpServletResponse response, String obj) throws IOException {
		String path = obj.toString();
		try {
			// path是指欲下载的文件的路径。
			File file = new File(path);
			// 取得文件名。
			String filename = file.getName();
			// 取得文件的后缀名。
			String ext = filename.substring(filename.lastIndexOf(".") + 1).toUpperCase();
			// 以流的形式下载文件。
			InputStream fis = new BufferedInputStream(new FileInputStream(path));
			byte[] buffer = new byte[fis.available()];
			fis.read(buffer);
			fis.close();
			// 清空response
			response.reset();
			// 设置response的Header
			response.addHeader("Content-Disposition", "attachment;filename=" + toUtf8String(filename));
			response.addHeader("Content-Length", "" + file.length());
			OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
			response.setContentType("application/octet-stream");
			toClient.write(buffer);
			toClient.flush();
			toClient.close();
		} catch (Exception ex) {
			//将错误信息发送到页面
			response.getWriter().print("error");
			ex.printStackTrace();
		}
		return null;
	}

	/**
	 *
	 * @param s
	 * @return
	 */
	public static String toUtf8String(String s) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			if (c >= 0 && c <= 255) {
				sb.append(c);
			} else {
				byte[] b;
				try {
					b = Character.toString(c).getBytes("utf-8");
				} catch (Exception ex) {
					System.out.println(ex);
					b = new byte[0];
				}
				for (int j = 0; j < b.length; j++) {
					int k = b[j];
					if (k < 0)
						k += 256;
					sb.append("%" + Integer.toHexString(k).toUpperCase());
				}
			}
		}
		return sb.toString();
	}

	/*********************************** 分割线 ****************************************************/
	/****
	 * 获取Session中用户角色 han 2016-06-07
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(value = "/getUserInfoSeesion.do", method = RequestMethod.POST)
	public @ResponseBody void getUserInfoSeesion(HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		UserBean user;
		Map<String, Object> map = new HashMap<>();
		try {
			user = (UserBean) request.getSession().getAttribute("user");
			// 取得user的userID
//			response.getWriter().print(user.getROLE_ID());
			map.put("userId", user.getROLE_ID());  //得到当前用户的角色ID和所对应的客户ID，与页面的客户ID匹配，对应不同的操作
			map.put("customerId",user.getCustomerId());
			String msg=JSONUtil.beanToJson(map);
			response.setContentType("text/html;charset=UTF-8");
		    //设置不使用缓存   
		    response.setHeader("Cache-Control","no-cache"); 
		    response.getWriter().write(msg);
			
		} catch (Exception e) {
			response.getWriter().print("error");
		}
	}
	
	 /**
	 * 建立excel模型
	 * @param workbook  工作簿对象
	 * @param title  sheet页名称
	 * @param header 标题列表
	 * @param list  集合对象
	 * @param s_dt 开始时间
	 * @param s_dt2 结束时间 
	 * @param flag 汇总/明细 标识
	 * @param imgPath 图片路径
	 * @param cusName 客户名称
	 * @param rowNum 得到的最后一行的行号
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "deprecation" })
	public static XSSFWorkbook exportExcel(XSSFWorkbook workbook, String title, String header[], List list, Date s_dt,
			Date s_dt2, String flag,String imgPath,String cusName,int rowNum) {
		XSSFSheet sheet = null;
		XSSFRow row = null;
		XSSFCellStyle style1 = null;
		XSSFCellStyle styleContent = null;
		XSSFCellStyle styleDate = null;
		XSSFCellStyle cell2 = null;
		XSSFCellStyle cell3 = null;
		XSSFCellStyle cell4 = null;
		if("1".equals(flag)){//开始
			sheet = workbook.createSheet(title);
		}else{
			sheet = workbook.getSheetAt(0);
		}
		// 创建sheet页
		if ("1".equals(flag)) {
			// 设置特殊列的列宽(0列开始)
			sheet.setColumnWidth((int) 0, (int) 3 * 256);
			sheet.setColumnWidth(3, 20 * 256);
			sheet.setColumnWidth(4, 12 * 256);
			sheet.setColumnWidth(5, 20 * 256);
			row = sheet.createRow((int) 7); // 有两个的时候，第二个开始的行应该为第一个最后一行的行数+1空白行
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd");
			String sdate;
			String edate;
			sdate = sdf.format(s_dt);
			edate = sdf.format(s_dt2);
			
			XSSFCellStyle style = null;
			style = (XSSFCellStyle) workbook.createCellStyle();
			style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
			style.setAlignment(XSSFCellStyle.ALIGN_LEFT);// 水平
			// 生成一个字体
			XSSFFont font = (XSSFFont) workbook.createFont();
			font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
			font.setFontHeightInPoints((short) 9); // 9号字体
			font.setFontName("Calibri");
			style.setFont(font);

			XSSFCellStyle style2 = null;
			style2 = (XSSFCellStyle) workbook.createCellStyle();
			style2.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
			style2.setAlignment(XSSFCellStyle.ALIGN_LEFT);// 水平
			// 生成一个字体
			XSSFFont font2 = (XSSFFont) workbook.createFont();
			font2.setFontHeightInPoints((short) 9); // 9号字体
			font2.setFontName("宋体");
			style2.setFont(font2);
			
			XSSFCellStyle style3 = null;
			style3 = (XSSFCellStyle) workbook.createCellStyle();
			style3.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
			style3.setAlignment(XSSFCellStyle.ALIGN_LEFT);// 水平
			// 生成一个字体
			XSSFFont font3 = (XSSFFont) workbook.createFont();
			font3.setFontHeightInPoints((short) 9); // 9号字体
			font3.setFontName("Calibri");
			style3.setFont(font3);
			// 创建周报导出title信息
			XSSFRow rowTitle = sheet.createRow((int) 1);
			rowTitle.createCell((int) 1).setCellValue("Campaign:");
			rowTitle.createCell((int) 2).setCellValue(cusName+"互联网广告监测周报");
			rowTitle.getCell(1).setCellStyle(style);
			rowTitle.getCell(2).setCellStyle(style2);
			XSSFRow rowTitle2 = sheet.createRow((int) 2);
			rowTitle2.createCell((int) 1).setCellValue("Period:");
			rowTitle2.createCell((int) 2).setCellValue(sdate + "-" + edate);
			rowTitle2.getCell(1).setCellStyle(style);
			rowTitle2.getCell(2).setCellStyle(style3);
			XSSFRow rowTitle3 = sheet.createRow((int) 3);
			rowTitle3.createCell((int) 1).setCellValue("Preparedby:");
			rowTitle3.createCell((int) 2).setCellValue("UDBAC");
			rowTitle3.getCell(1).setCellStyle(style);
			rowTitle3.getCell(2).setCellStyle(style3);			
			// 给当前workbook的当前sheet页插入logo图片 "/base/template/logo.png"
			new DataExportController().insetImages(imgPath, workbook, sheet);
		}
		//对sheet取消网格
		sheet.setDisplayGridlines(false);
		
		// 设置特殊列的列宽(0列开始)
		sheet.setColumnWidth((int) 0, (int) 3 * 256);
		sheet.setColumnWidth(3, 20 * 256);
		sheet.setColumnWidth(4, 15 * 256);
		sheet.setColumnWidth(5, 20 * 256);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd");
		String sdate;
		String edate;
		sdate = sdf.format(s_dt);
		edate = sdf.format(s_dt2);
		
		XSSFCellStyle style = null;
		style = (XSSFCellStyle) workbook.createCellStyle();
		style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style.setAlignment(XSSFCellStyle.ALIGN_LEFT);// 水平
		// 生成一个字体
		XSSFFont font = (XSSFFont) workbook.createFont();
		font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
		font.setFontHeightInPoints((short) 9); // 9号字体
		font.setFontName("Calibri");
		style.setFont(font);

		XSSFCellStyle style2 = null;
		style2 = (XSSFCellStyle) workbook.createCellStyle();
		style2.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style2.setAlignment(XSSFCellStyle.ALIGN_LEFT);// 水平
		// 生成一个字体
		XSSFFont font2 = (XSSFFont) workbook.createFont();
		font2.setFontHeightInPoints((short) 9); // 9号字体
		font2.setFontName("宋体");
		style2.setFont(font2);
		
		XSSFCellStyle style3 = null;
		style3 = (XSSFCellStyle) workbook.createCellStyle();
		style3.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style3.setAlignment(XSSFCellStyle.ALIGN_LEFT);// 水平
		// 生成一个字体
		XSSFFont font3 = (XSSFFont) workbook.createFont();
		font3.setFontHeightInPoints((short) 9); // 9号字体
		font3.setFontName("Calibri");
		style3.setFont(font3);
		// 创建周报导出title信息
		if("1".equals(flag)){
		XSSFRow rowTitle = sheet.createRow((int) 1);
		rowTitle.createCell((int) 1).setCellValue("Campaign:");
		rowTitle.createCell((int) 2).setCellValue(cusName+"互联网广告监测周报");
		rowTitle.getCell(1).setCellStyle(style);
		rowTitle.getCell(2).setCellStyle(style2);
		XSSFRow rowTitle2 = sheet.createRow((int) 2);
		rowTitle2.createCell((int) 1).setCellValue("Period:");
		rowTitle2.createCell((int) 2).setCellValue(sdate + "-" + edate);
		rowTitle2.getCell(1).setCellStyle(style);
		rowTitle2.getCell(2).setCellStyle(style3);
		XSSFRow rowTitle3 = sheet.createRow((int) 3);
		rowTitle3.createCell((int) 1).setCellValue("Preparedby:");
		rowTitle3.createCell((int) 2).setCellValue("UDBAC");
		rowTitle3.getCell(1).setCellStyle(style);
		rowTitle3.getCell(2).setCellStyle(style3);
		// 给当前workbook的当前sheet页插入logo图片 "/base/template/logo.png"
		new DataExportController().insetImages(imgPath, workbook, sheet);
		}
		//第一种样式
		style1 = workbook.createCellStyle();
		style1 = (XSSFCellStyle) workbook.createCellStyle();
		style1.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style1.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 水平
		// 设置背景颜色
		style1.setFillForegroundColor(new XSSFColor(new Color(55, 96, 145))); // 前景色为深蓝色
		style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
		// 生成一个字体
		XSSFFont fonts = (XSSFFont) workbook.createFont();
		fonts.setFontHeightInPoints((short) 9); // 9号字体
		fonts.setFontName("宋体");
		fonts.setColor(new XSSFColor(new Color(255, 255, 255))); // 字体颜色为白色
		fonts.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
		style1.setFont(fonts);
		new DataExportController().setBoderStyle(style1);
		
		// 第二个样式,设置文本内容样式
		styleContent = workbook.createCellStyle();
		XSSFFont font1 = workbook.createFont();
		styleContent.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		styleContent.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 水平
		font1.setFontHeightInPoints((short) 9); // 9号字体
		font1.setFontName("宋体");
		styleContent.setFont(font1);
		new DataExportController().setBoderStyle(styleContent);
		
		cell2 = workbook.createCellStyle();
		cell2.setDataFormat(HSSFDataFormat.getBuiltinFormat("#,##0"));
		cell2.setVerticalAlignment(XSSFCellStyle.ALIGN_LEFT);// 垂直
		cell2.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 水平
		XSSFFont font21 = workbook.createFont();
		font21.setFontHeightInPoints((short) 9); // 9号字体
		font21.setFontName("Calibri");
		cell2.setFont(font21);
		new DataExportController().setBoderStyle(cell2);
		
		cell3 = workbook.createCellStyle();
		cell3.setDataFormat(HSSFDataFormat.getBuiltinFormat("0.00%"));
		cell3.setVerticalAlignment(XSSFCellStyle.ALIGN_CENTER);// 垂直
		cell3.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 水平
		cell3.setFont(font21);
		new DataExportController().setBoderStyle(cell3);
		
		// 第三个样式,单独的日期格式设置
		styleDate = workbook.createCellStyle();
		CreationHelper helper = workbook.getCreationHelper();
		styleDate.setDataFormat(helper.createDataFormat().getFormat("yyyy/MM/dd"));// 设置日期的格式信息
		styleDate.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		styleDate.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 水平
		styleDate.setFont(font21);
		new DataExportController().setBoderStyle(styleDate);
		//测试用的------
		cell4 = workbook.createCellStyle();
		XSSFFont font4 = workbook.createFont();
		font4.setFontName("Calibri");
		cell4.setFont(font4);
		//设置边框样式
		new DataExportController().setBoderStyle(cell4);
		
		XSSFRow row1 = null;
		if("1".equals(flag)){
			row1 = sheet.createRow((int) rowNum); //汇总数据是第一个创建sheet页的
		}else{
			row1 = workbook.getSheetAt(0).createRow((int) rowNum);  //已经存在的sheet页不能重新创建直接获取
		}
		
		for(int i=1;i<=header.length;i++){
			row1.createCell(i); //循环创建列
		}
		
		row1.getCell((int) 1).setCellValue("项目名称");
		row1.getCell((int) 2).setCellValue("媒体名称");
		row1.getCell((int) 3).setCellValue("广告位");
		row1.getCell((int) 4).setCellValue("时间");
		row1.getCell((int) 5).setCellValue("营销识别码");
		row1.getCell((int) 6).setCellValue("广告曝光监测");
		row1.getCell((int) 11).setCellValue("活动网站监测");
		new DataExportController().setHeaderStyle(workbook.createCellStyle(), workbook, row1);
		if ("1".equals(flag)) {
			row = sheet.createRow((int) 7); //汇总数据时候创建的是第七行
		}else{
			row = sheet.createRow((int) rowNum+1); // //非汇总数据的时候是从rowNum开始
		}
		// 产生表格标题行
		for (int i = 0; i < header.length; i++) { // header数组下标从0开始取
			if (i + 1 < 6) {
				sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum+1, i+1, i+1));
			}
			XSSFCell cell = row.createCell(i + 1); // 创建列的时候从第二列开始
			cell.setCellValue(header[i]);
			cell.setCellStyle(style1);
			sheet.autoSizeColumn(i);
		}
		sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 6, 10));
		sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 11, 16));
		
		for (int i = 1; i <= header.length; i++) {
			row1.getCell(i).setCellStyle(style1);
		}
		XSSFRow row2 = null;
		// 遍历每一行取出的数据，rowNum行为title开始的行号
		for (int i = 0; i < list.size(); i++) { 
			row2 = sheet.createRow(i + rowNum+2);//rowNum+2 为正文内容开始的行数
			if(list.size() == 1){ //1条数据的时候进行汇总
				sheet.addMergedRegion(new CellRangeAddress(rowNum+1, rowNum+1, 1, 4)); //rowNum+1表示只有一条数据的时候的汇总
			}
			DataExport de = (DataExport) list.get(i);
			row2.createCell(1).setCellValue(de.getActivity_name());
			row2.createCell(2).setCellValue(de.getMedia_name());
			row2.createCell(3).setCellValue(de.getPoint_location());
			if ("1".equals(flag)) {
				row2.createCell(4).setCellValue("-"); // 判断第四列是否是汇总数据,不是NULL的时候，非汇总数据，创建第四列
			} else {
				row2.createCell(4).setCellValue(de.getStart_date()); //
			}
			row2.createCell(5).setCellValue(de.getMic());
			if (de.getPv() != null) {
				row2.createCell(6).setCellValue(de.getPv());
			} else {
				row2.createCell(6).setCellValue("-");
			}
			if (de.getUv() != null) {
				row2.createCell(7).setCellValue(de.getUv());
			} else {
				row2.createCell(7).setCellValue("-");
			}
			if (de.get_pv() != null) {
				row2.createCell(8).setCellValue(de.get_pv());
			} else {
				row2.createCell(8).setCellValue("-");
			}
			if (de.get_uv() != null) {
				row2.createCell(9).setCellValue(de.get_uv());
			} else {
				row2.createCell(9).setCellValue("-");
			}
			if (de.getPv() != null && de.getPv() != 0) {
				System.out.println(de.get_pv());
				System.out.println(de.getPv());
				System.out.println(de.get_pv() / de.getPv());
				row2.createCell(10).setCellValue(de.get_pv() / de.getPv());// 求转化率CTR
			} else {
				row2.createCell(10).setCellValue("-");// 求转化率CTR
			}
			if (de.getA_vv() != null) {
				row2.createCell(11).setCellValue(de.getA_vv());
			} else {
				row2.createCell(11).setCellValue("-");
			}
			if (de.getA_pv() != null) {
				row2.createCell(12).setCellValue(de.getA_pv());
			} else {
				row2.createCell(12).setCellValue("-");
			}
			if (de.getA_uv() != null) {
				row2.createCell(13).setCellValue(de.getA_uv());
			} else {
				row2.createCell(13).setCellValue("-");
			}
			if (de.getBounce_t() != null) {
				row2.createCell(14).setCellValue(de.getBounce_t());
			} else {
				row2.createCell(14).setCellValue("-");
			}
			if (de.getBounce_r() != null) {
				row2.createCell(15).setCellValue(de.getBounce_r());
			} else {
				row2.createCell(15).setCellValue("-");
			}
			if (de.getTime_s() != null) {
				row2.createCell(16).setCellValue(de.getTime_s());
			} else {
				row2.createCell(16).setCellValue("-");
			}
			row2.getCell(1).setCellStyle(styleContent); 
			row2.getCell(2).setCellStyle(styleContent);
			row2.getCell(3).setCellStyle(styleContent);
			row2.getCell(4).setCellStyle(styleDate); // 第四列的日期格式设置
			row2.getCell(5).setCellStyle(cell2);
			row2.getCell(6).setCellStyle(cell2);
			row2.getCell(7).setCellStyle(cell2);
			row2.getCell(8).setCellStyle(cell2);
			row2.getCell(9).setCellStyle(cell2);
			row2.getCell(10).setCellStyle(cell3);
			row2.getCell(11).setCellStyle(cell2);
			row2.getCell(12).setCellStyle(cell2);
			row2.getCell(13).setCellStyle(cell2);
			row2.getCell(14).setCellStyle(cell2);
			row2.getCell(15).setCellStyle(cell3);
			row2.getCell(16).setCellStyle(cell2);
		}
		//----------测试用的----------
//		循环完以后，再对设置字体
		System.out.println("getLastRowNum:  "+sheet.getLastRowNum());
		return workbook;
	}
	
	/**
	 * 得到一个图片，插入到excel中
	 * @param ImgPath  //传入的图片路径
	 * @param workbook //所在的工作簿对象
	 * @param sheet //工作簿的第几个sheet页
	 */
	public void insetImages(String ImgPath, XSSFWorkbook workbook, XSSFSheet sheet) {
		try {
			InputStream is = new FileInputStream(ImgPath);
			byte[] bytes = IOUtils.toByteArray(is);

			int pictureIdx = workbook.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);

			CreationHelper helper = workbook.getCreationHelper();
			Drawing drawing = sheet.createDrawingPatriarch();
			ClientAnchor anchor = helper.createClientAnchor();

			// 图片插入坐标
			anchor.setRow1(1); // 第一行
			anchor.setCol1(14); // 第14列

			// 插入图片
			Picture pict = drawing.createPicture(anchor, pictureIdx);
			pict.resize();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 周报导出
	 * 
	 * @param date
	 * @param response
	 * @param actName
	 * @param actCode
	 * @return
	 * @throws Exception 
	 * @throws Exception 
	 */
	@ResponseBody
	@RequestMapping("/exportWeek.do")
	public void listWeekInfo(@RequestParam(value = "startDate", required = true) String date,
			HttpServletRequest request, HttpServletResponse response,
			@RequestParam(value = "actName", required = false) String actName,
			@RequestParam(value = "actCode", required = false) String actCode,
			@RequestParam(value = "endDate", required = true) String endDate,
			@RequestParam(value = "cusName", required = true) String cusName) throws Exception {
		
		cusName = URLDecoder.decode(cusName,"UTF-8"); //解码
		
		System.out.println(cusName);
		
		// 取得session中的user对象
		HttpSession session = request.getSession();
		String imgPath = session.getServletContext().getRealPath("/") + "images/logo.png";
		System.out.println(imgPath);

		Date dt = null;
		Date dt2 = null;
		int rowNum = 0;
		// 日期格式化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if (date != null && endDate != null) {
			try {
				dt = sdf.parse(date);
				dt2 = sdf.parse(endDate);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {
			XSSFWorkbook workbook = new XSSFWorkbook();
			List<DataExport> info = exportService.listWeekInfo(dt, actName, actCode);
			List<DataExport> sum_info = exportService.listSumWeekInfo(dt, actName, actCode);
			System.out.println(sum_info);
			// 创建一个请求头信息
			String header[] = { "项目名称", "媒体名称", "广告位", "时间", "营销识别码", "曝光次数", "曝光人数", "点击次数", "点击人数", "点击率CTR", "访问次数",
					"浏览量", "访问人数", "跳出次数", "跳出率", "平均访问时长" };
			String title = "周报导出报告";
			// flag为标识，0代表的是没有汇总的,1代表是汇总数据
			workbook = exportExcel(workbook, title, header, sum_info, dt, dt2, "1",imgPath,cusName,6);
			if(workbook != null){
				rowNum = workbook.getSheetAt(0).getLastRowNum();
			}
			// 详细数据-- rowNum得到是上一个的最后一行 还有留一个空白行 真正开始从rowNum+2行开始 
			workbook = exportExcel(workbook, title, header, info,dt,dt2,"0",imgPath,cusName, rowNum+2);
			// 保存文件到临时目录
			StringBuffer buffer = new StringBuffer(50);
			if (filePathManager.getTmpExcel().isEmpty()) {
				File filePath = new File(filePathManager.toString());
				filePath.mkdirs();
			}
			buffer.append(filePathManager.getTmpExcel());
			buffer.append("week");
			buffer.append("/");
			File file = new File(buffer.toString());
			if (!file.exists()) {
				file.mkdirs();
			}
			buffer.append("项目周报_互联网广告监测.xlsx");
//			FileOutputStream stream = new FileOutputStream(buffer.toString());
//			workbook.write(stream);  //输出到本地磁盘中的
//			stream.flush();
//			stream.close();
			outputWorkBook(cusName,response, workbook, buffer.toString()); //
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 弹出下载框
	 * @param response
	 * @param workbook
	 * @throws IOException
	 */
	public static void outputWorkBook(String cusName,HttpServletResponse response,Workbook workbook,String filePath) throws IOException{
		String fileName = "项目周报_"+cusName+"互联网广告监测.xlsx";
		// 防导出时中文乱码
		//fileName = new String(fileName.getBytes("gb2312"), "iso8859-1");
		// 设置文件类型
		response.setContentType("application/vnd.ms-excel; charset=utf-8");
		response.setHeader("Content-disposition", "attachment;filename=" + fileName);
		response.setHeader("Content-disposition","attachment; filename=\""+URLEncoder.encode(fileName, "UTF-8")+ "\"");
		response.setCharacterEncoding("utf-8");
		OutputStream ouputStream = response.getOutputStream();
		// 工作簿输出流
		workbook.write(ouputStream);
		ouputStream.flush();
		ouputStream.close();
	}

	/**
	 * 1.header头信息样式
	 * @param style
	 * @param workbook
	 */
	public void setHeaderStyle(XSSFCellStyle style, Workbook workbook, XSSFRow row) {
		style = (XSSFCellStyle) workbook.createCellStyle();
		style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style.setAlignment(XSSFCellStyle.ALIGN_CENTER);// 水平
		// 设置背景颜色
		style.setFillForegroundColor(new XSSFColor(new Color(55, 96, 145))); // 前景色为深蓝色
		style.setFillPattern(CellStyle.SOLID_FOREGROUND);
		// 生成一个字体
		XSSFFont font = (XSSFFont) workbook.createFont();
		font.setFontHeightInPoints((short) 9); // 9号字体
		font.setFontName("宋体");
		font.setColor(new XSSFColor(new Color(255, 255, 255))); // 字体颜色为白色
		font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD); // 字体加粗
		style.setFont(font);
		for (int i = 1; i <= 5; i++) {
			row.getCell(i).setCellStyle(style);
		}
		row.getCell(6).setCellStyle(style);
		row.getCell(11).setCellStyle(style);
	}

	public void setBoderStyle(XSSFCellStyle style){
		//设置边框样式
	     style.setBorderTop(HSSFCellStyle.BORDER_THIN);
	     style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
	     style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
	     style.setBorderRight(HSSFCellStyle.BORDER_THIN);
	     //设置边框颜色
	     style.setTopBorderColor(HSSFColor.BLACK.index);
	     style.setBottomBorderColor(HSSFColor.BLACK.index);
	     style.setLeftBorderColor(HSSFColor.BLACK.index);
	     style.setRightBorderColor(HSSFColor.BLACK.index);
	     //设置位置居中
	     style.setAlignment(HSSFCellStyle.ALIGN_CENTER);// 水平
	     style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);// 垂直
	}
	
	//获得系统的前一天
		 public static Date getNextDay(Date date) {
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(date);
			calendar.add(Calendar.DAY_OF_MONTH, -1);
			date = calendar.getTime();
			return date;
		}
	
}
